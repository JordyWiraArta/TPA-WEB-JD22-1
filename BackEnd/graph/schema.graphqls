# GraphQL schema example
#
# https://gqlgen.com/getting-started/

scalar Time

type Experience{
  id: ID!
  user_id: ID!
  title: String!
  employment_type: String!
  company_name: String!
  location: String!
  start_date: String!
  end_date: String!
}

type Education{
  id: ID!
  user_id: ID!
  school: String!
  degree: String!
  field_of_study: String!
  start_date: String!
  end_date: String!
}

type User {
  id: ID!
  first_name: String!
  last_name: String!
  job: String!
  email: String!
  password: String!
  profile_photo: String!
  background_photo: String!
  headline: String!
  is_active: Boolean!
  active_code: String!
  followers: Int!
  views: Int!
}

type connect_invitation{
  id: ID!
  user_src_id: ID!
  user_dst_id: ID!
  message: String!
}

type post{
  id: ID!
  user_id: ID!
  content_text: String!
  url: String!
  type: String!
  likes: Int!
  comments: Int!
  create_at: Time!
}

type likedPost{
  post_id: ID!
  user_id: ID!
}

type jobPost{
  id: ID!
  logo_url: String!
  company_name: String!
  job_name: String!
  location: String!
}

type comment{
  id: ID!
  post_id: ID!
  user_id: ID!
  reply_id: ID!
  content: String!
  likes: Int!
  create_at: Time!
}

type likedComment{
  comment_id: ID!
  user_id: ID!
}

type followedUser{
  user_id: ID!
  followed_id: ID!
}

type connection{
  user_id: ID!
  connected_id: ID!
}

type notification{
  user_id: ID!
  src_id: ID!
  content: String!
}

type message{
  room_id: ID!
  text: String!
  image_url: String!
  user_id: String!
}

type roomChat{
  id: ID!
  user_id1: ID!
  user_id2: ID!
}

type Query {
  users: [User!]!
  currUser(user_id:ID!): User!
  posts(number:Int!): [post!]!
  userInvitations(user_id:ID!, dst_id:ID!): [connect_invitation!]!
  myInvitations(dst_id:ID!): [connect_invitation!]!
  userEducations(user_id:ID!): [Education!]!
  userExperiences(user_id:ID!): [Experience!]!
  comments(post_id: ID!, number:Int!): [comment!]!
  replyComments(post_id:ID!, comment_id:ID!, number:Int!):[comment!]!
  likedComments(user_id:ID!, comment_id: ID!): [likedComment!]!
  follows(user_id:ID!): [followedUser!]!
  followers(user_id:ID!): [followedUser!]!
  connects(user_id:ID!): [connection!]!
  connectors(user_id:ID!): [connection!]!
  jobPosts: [jobPost!]!
  likedPosts(user_id:ID!, post_id:ID!): [likedPost!]!
  myNotifications(user_id:ID!): [notification!]!
  messages(roomid:ID!): [messages!]!
  roomChats(userid:ID!): [roomChats!]! 
}

input newUser{
  first_name: String!
  last_name: String!
  email: String!
  password: String!
}

input updateUser{
  first_name: String!
  last_name: String!
  email: String!
  password: String!
  profile_photo: String!
  background_photo: String!
  headline: String!
  job: String!
}

input inputExp{
  user_id: ID!
  title: String!
  employment_type: String!
  company_name: String!
  location: String!
  start_date: String!
  end_date: String!
}

input inputEdu{
  user_id: ID!
  school: String!
  degree: String!
  field_of_study: String!
  start_date: String!
  end_date: String!
}

input newJobPost{
  logo_url: String!
  company_name: String!
  job_name: String!
  location: String!
}

type Mutation {
  createUser(input: newUser!): User!
  updateUser(id: ID!, code:String!, input: updateUser!):User!
  addViewUser(user_id:ID!): User!
  addEdu(input:inputEdu!): Education!
  addExp(input:inputExp): Experience!
  updateUserEdu(id:ID!,input:inputEdu!): Education!
  updateUserExp(id:ID!, input:inputExp!): Experience!
  login(email:String!, password:String!):User!
  resetEmail(email:String!):String!
  createPost(userId:ID!, type: String!, content:String!, url:String!): post!
  createJobPost(input:newJobPost!): jobPost!
  likePost(user_id:ID!, post_id:ID!): likedPost!
  unlikePost(user_id:ID!, post_id:ID!): likedPost!
  createComment(user_id:ID!, post_id:ID!, content:String!): comment!
  createReplyComment(user_id:ID!, post_id:ID!, comment_id:ID!, content:String!): comment!
  likeComment(user_id:ID!, comment_id:ID!): likedComment!
  unlikeComment(user_id:ID!, comment_id:ID!): likedComment!
  follow(user_id:ID!, follow_id: ID!): followedUser!
  sendInvitation(user_id:ID!, connecting_id: ID!, message: String!): connect_invitation!
  connect(user_id:ID!, connected_id:ID!): connection!
  rejectInvitation(id:ID!): connect_invitation!
  addNotification(src_id:ID!, content: String!): notification!
  createRoomChat(userid:ID!, otherid:ID!): roomChat!
  sendMessage(roomid:ID!, text:String!, image_url:String!, userid: ID!): message!
}
